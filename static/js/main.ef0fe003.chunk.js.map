{"version":3,"sources":["enums/OptionsEnum.ts","enums/ButtonsEnum.ts","components/Form/Form.tsx","components/Icon.tsx","components/CarouselList/CarouselList.tsx","components/Carousel/Carousel.tsx","App.tsx","index.tsx"],"names":["OptionsEnum","ButtonsEnum","Form","carouselOptions","changeOptionValue","maxSlidesCount","itemWidth","frameSize","step","animationDuration","action","className","htmlFor","ItemWidth","id","type","name","value","onChange","FrameSize","min","max","Step","AnimationDuration","Icon","children","CarouselList","slides","styles","imgStyles","listStyles","style","map","image","idx","src","alt","Carousel","images","useState","translateX","setTranslateX","currPosition","setCurrPosition","length","endPosition","setEndPosition","setButtonClassNames","buttonType","forwardBtnIsDisabeld","Forward","backBtnIsDisabeld","Back","classNames","useEffect","prevTranslate","width","transform","transition","height","onClick","prevPosition","App","setCarouselOptions","event","currentOption","target","newValue","prevOptions","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef0fe003.chunk.js","sourcesContent":["export enum OptionsEnum {\n  ItemWidth = 'itemWidth',\n  FrameSize = 'frameSize',\n  Step = 'step',\n  AnimationDuration = 'animationDuration',\n}\n","export enum ButtonsEnum {\n  Forward = 'arrow_forward_ios',\n  Back = 'arrow_back_ios',\n}\n","import { FC, ChangeEvent } from 'react';\nimport { CarouselOptions } from '../../types/CarouselOptions';\nimport { OptionsEnum } from '../../enums/OptionsEnum';\nimport './Form.scss';\n\ntype Props = {\n  carouselOptions: CarouselOptions;\n  changeOptionValue: (event: ChangeEvent<HTMLInputElement>) => void;\n  maxSlidesCount: number;\n};\n\nexport const Form: FC<Props> = (\n  { carouselOptions, changeOptionValue, maxSlidesCount },\n) => {\n  const {\n    itemWidth,\n    frameSize,\n    step,\n    animationDuration,\n  } = carouselOptions;\n\n  return (\n    <form action=\"#\" className=\"App-Form Form\">\n      <div className=\"Form-Field\">\n        <label\n          htmlFor={OptionsEnum.ItemWidth}\n          className=\"Form-Label\"\n        >\n          {'Item width: '}\n        </label>\n\n        <input\n          id={OptionsEnum.ItemWidth}\n          className=\"Form-Input\"\n          type=\"number\"\n          name={OptionsEnum.ItemWidth}\n          value={itemWidth}\n          onChange={changeOptionValue}\n        />\n      </div>\n\n      <div className=\"Form-Field\">\n        <label\n          htmlFor={OptionsEnum.ItemWidth}\n          className=\"Form-Label\"\n        >\n          {'Frame size: '}\n        </label>\n\n        <input\n          id={OptionsEnum.FrameSize}\n          className=\"Form-Input\"\n          type=\"number\"\n          name={OptionsEnum.FrameSize}\n          value={frameSize}\n          min={1}\n          max={maxSlidesCount}\n          onChange={changeOptionValue}\n        />\n      </div>\n\n      <div className=\"Form-Field\">\n        <label\n          htmlFor={OptionsEnum.ItemWidth}\n          className=\"Form-Label\"\n        >\n          {'Step: '}\n        </label>\n\n        <input\n          id={OptionsEnum.Step}\n          className=\"Form-Input\"\n          type=\"number\"\n          name={OptionsEnum.Step}\n          value={step}\n          min={1}\n          max={maxSlidesCount - 1}\n          onChange={changeOptionValue}\n        />\n      </div>\n\n      <div className=\"Form-Field\">\n        <label\n          htmlFor={OptionsEnum.ItemWidth}\n          className=\"Form-Label\"\n        >\n          {'Animation duration (ms): '}\n        </label>\n\n        <input\n          id={OptionsEnum.AnimationDuration}\n          className=\"Form-Input\"\n          type=\"number\"\n          name={OptionsEnum.AnimationDuration}\n          value={animationDuration}\n          onChange={changeOptionValue}\n        />\n      </div>\n    </form>\n  );\n};\n","import { FC, ReactNode } from 'react';\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport const Icon: FC<Props> = ({ children }) => (\n  <span className=\"material-symbols-outlined\">\n    {children}\n  </span>\n);\n","import { FC } from 'react';\nimport { CarouselStyles } from '../../types/CarouselStyles';\n\ntype Props = {\n  slides: string[];\n  styles: CarouselStyles;\n};\n\nexport const CarouselList: FC<Props> = ({ slides, styles }) => {\n  const { imgStyles, listStyles } = styles;\n\n  return (\n    <ul className=\"Carousel-List\" style={listStyles}>\n      {slides.map((image, idx) => (\n        <li key={image} className=\"Carousel-ListItem\">\n          <img\n            src={image}\n            alt={`${idx + 1}`}\n            style={imgStyles}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { FC, useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Icon } from '../Icon';\nimport { CarouselOptions } from '../../types/CarouselOptions';\nimport { CarouselStyles } from '../../types/CarouselStyles';\nimport { ButtonsEnum } from '../../enums/ButtonsEnum';\nimport { CarouselList } from '../CarouselList';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  carouselOptions: CarouselOptions;\n};\n\nexport const Carousel: FC<Props> = ({ images, carouselOptions }) => {\n  const {\n    itemWidth,\n    frameSize,\n    step,\n    animationDuration,\n  } = carouselOptions;\n\n  const startPosition = 0;\n\n  const [translateX, setTranslateX] = useState<number>(0);\n  const [currPosition, setCurrPosition] = useState<number>(0);\n  const [endPosition, setEndPosition] = useState<number>(\n    images.length - frameSize,\n  );\n\n  const setButtonClassNames = (buttonType: ButtonsEnum) => {\n    const forwardBtnIsDisabeld = buttonType === ButtonsEnum.Forward\n      && currPosition === endPosition;\n    const backBtnIsDisabeld = buttonType === ButtonsEnum.Back\n      && currPosition === startPosition;\n\n    return classNames('Carousel-Button', {\n      'Carousel-Button_Forward': buttonType === ButtonsEnum.Forward,\n      'Carousel-Button_Back': buttonType === ButtonsEnum.Back,\n      'Carousel-Button_Disabled': (forwardBtnIsDisabeld || backBtnIsDisabeld),\n    });\n  };\n\n  useEffect(() => {\n    setEndPosition(images.length - frameSize);\n  }, [frameSize]);\n\n  useEffect(() => {\n    setTranslateX(prevTranslate => {\n      if ((currPosition * itemWidth) > prevTranslate) {\n        return -currPosition * itemWidth;\n      }\n\n      return currPosition * itemWidth;\n    });\n  }, [currPosition]);\n\n  const handlePrevSlide = () => {\n    setCurrPosition(prevPosition => {\n      if (prevPosition - step < startPosition) {\n        return startPosition;\n      }\n\n      return prevPosition - step;\n    });\n  };\n\n  const handleNextSlide = () => {\n    setCurrPosition(prevPosition => {\n      if (prevPosition + step > endPosition) {\n        return endPosition;\n      }\n\n      return prevPosition + step;\n    });\n  };\n\n  const styles: CarouselStyles = {\n    listStyles: {\n      width: `${itemWidth * frameSize}px`,\n      transform: `translateX(${translateX}px)`,\n      transition: `transform ${animationDuration}ms ease`,\n    },\n\n    imgStyles: {\n      width: `${itemWidth}px`,\n      height: `${itemWidth}px`,\n    },\n  };\n\n  return (\n    <div className=\"App-Carousel Carousel\">\n      <div className=\"Carousel-Container\">\n        <CarouselList\n          slides={images}\n          styles={styles}\n        />\n\n        <div className=\"Carousel-Buttons\">\n          <button\n            onClick={handlePrevSlide}\n            className={setButtonClassNames(ButtonsEnum.Back)}\n            type=\"button\"\n          >\n            <Icon>\n              {ButtonsEnum.Back}\n            </Icon>\n          </button>\n\n          <button\n            onClick={handleNextSlide}\n            className={setButtonClassNames(ButtonsEnum.Forward)}\n            type=\"button\"\n            data-cy=\"next\"\n          >\n            <Icon>\n              {ButtonsEnum.Forward}\n            </Icon>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useState, FC, ChangeEvent } from 'react';\nimport { Form } from './components/Form';\nimport { Carousel } from './components/Carousel/Carousel';\nimport { CarouselOptions } from './types/CarouselOptions';\nimport { OptionsEnum } from './enums/OptionsEnum';\nimport './scss/App.scss';\n\nexport const App: FC = () => {\n  const [carouselOptions, setCarouselOptions] = useState<CarouselOptions>({\n    [OptionsEnum.ItemWidth]: 130,\n    [OptionsEnum.FrameSize]: 3,\n    [OptionsEnum.Step]: 3,\n    [OptionsEnum.AnimationDuration]: 1000,\n  });\n\n  const images: string[] = [\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ];\n\n  const handleChangeOptionValue = (event: ChangeEvent<HTMLInputElement>) => {\n    const currentOption = event.target.name;\n    const newValue = +event.target.value;\n\n    setCarouselOptions(prevOptions => {\n      return {\n        ...prevOptions,\n        [currentOption]: newValue,\n      };\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-Container\">\n        <h1 className=\"App-Title\" data-cy=\"title\">{`Carousel with ${images.length} images`}</h1>\n\n        <Form\n          carouselOptions={carouselOptions}\n          changeOptionValue={handleChangeOptionValue}\n          maxSlidesCount={images.length}\n        />\n\n        <Carousel images={images} carouselOptions={carouselOptions} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './scss/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}